using System;
using System.Collections.Immutable;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;

namespace Bearded.TD.Generators.Listeners;

sealed class ListenerSourceGenerator
{
    public static string GenerateFor(
        INamedTypeSymbol classSymbol,
        ImmutableArray<string> modifiers,
        ITypeSymbol eventsType,
        ImmutableArray<ITypeSymbol> events)
    {
        var usingNamespaces = events
            .Select(e => $"{e.ContainingNamespace}")
            .Append($"{eventsType.ContainingNamespace}")
            .Distinct()
            .Where(n => n != "<global namespace>" && n != $"{classSymbol.ContainingNamespace}")
            .OrderBy(n => n)
            .ToImmutableArray();

        return new ListenerSourceGenerator()
            .addFileTop($"{classSymbol.ContainingNamespace}", classSymbol.Name, usingNamespaces, modifiers)
            .addSubscribeMethod(eventsType.Name, events)
            .addUnsubscribeMethod(eventsType.Name, events)
            .addFileBottom()
            .build();
    }

    private readonly StringBuilder sb = new();

    private ListenerSourceGenerator addFileTop(
        string @namespace, string className,
        ImmutableArray<string> usingNamespaces,
        ImmutableArray<string> modifiers)
    {
        sb.Append(Templates.FileHeader);
        foreach (var u in usingNamespaces)
        {
            sb.Append(Templates.Using(u));
        }
        sb.Append(Strings.NewLine);
        sb.Append(Templates.ClassTop(@namespace, className, modifiers));
        return this;
    }

    private ListenerSourceGenerator addSubscribeMethod(string eventsType, ImmutableArray<ITypeSymbol> events)
    {
        sb.Append(Templates.SubscribeMethodTop(eventsType));
        foreach (var e in events)
        {
            sb.Append(Templates.SubscribeCall(e.Name));
        }
        sb.Append(Templates.MethodBottom);
        return this;
    }

    private ListenerSourceGenerator addUnsubscribeMethod(string eventsType, ImmutableArray<ITypeSymbol> events)
    {
        sb.Append(Templates.UnsubscribeMethodTop(eventsType));
        foreach (var e in events)
        {
            sb.Append(Templates.UnsubscribeCall(e.Name));
        }
        sb.Append(Templates.MethodBottom);
        return this;
    }

    private ListenerSourceGenerator addFileBottom()
    {
        sb.Append(Templates.ClassBottom);
        return this;
    }

    private string build() => sb.ToString();

    private static class Templates
    {
        public const string FileHeader = @"// This file is generated by Bearded.TD.Generators";

        public static string Using(string @namespace) => $@"
using {@namespace};";

        public static string ClassTop(string @namespace, string className, ImmutableArray<string> modifiers) => $@"
namespace {@namespace}
{{
    {string.Join(' ', modifiers)} class {className}
    {{";

        public const string ClassBottom = @"
    }
}
";

        public static string SubscribeMethodTop(string eventsType) => @$"
        private void subscribeAllEvents({eventsType} events)
        {{";

        public static string UnsubscribeMethodTop(string eventsType) => @$"
        private void unsubscribeAllEvents({eventsType} events)
        {{";

        public const string MethodBottom = @"
        }
";

        public static string SubscribeCall(string eventName) => $@"
            events.Subscribe<{eventName}>(this);";

        public static string UnsubscribeCall(string eventName) => $@"
            events.Unsubscribe<{eventName}>(this);";
    }
}
