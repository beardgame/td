using System.Collections.Immutable;
using System.Text;

namespace Bearded.TD.Generators.Reports;

sealed class ReportControlFactorySourceGenerator
{
    public static string GenerateFor(ImmutableArray<ControlToGenerateFor> controls)
    {
        return new ReportControlFactorySourceGenerator()
            .addFileTop()
            .addSwitchLines(controls)
            .addFileBottom()
            .build();
    }

    private readonly StringBuilder sb = new();

    private ReportControlFactorySourceGenerator addFileTop()
    {
        sb.Append(Templates.FileHeader);
        sb.Append(Templates.ClassTop());
        return this;
    }

    private ReportControlFactorySourceGenerator addSwitchLines(ImmutableArray<ControlToGenerateFor> controls)
    {
        foreach (var (control, report, needsGame) in controls)
        {
            sb.Append(Templates.SwitchLine($"{report.ContainingNamespace}.{report.MetadataName}", control.MetadataName, needsGame));
        }

        return this;
    }

    private ReportControlFactorySourceGenerator addFileBottom()
    {
        sb.Append(Templates.ClassBottom());
        return this;
    }

    private string build() => sb.ToString();

    private static class Templates
    {
        public const string FileHeader = @"// This file is generated by Bearded.TD.Generators
";

        public static string ClassTop() => $@"
using System;
using Bearded.TD.Game.Simulation.Reports;

namespace Bearded.TD.UI.Controls;

sealed partial class ReportControlFactory
{{
    private ReportControl createForReport(IReport report, ControlContainer detailsContainer)
    {{
        return report switch
        {{";

        public static string ClassBottom() => $@"
            _ => throw new InvalidOperationException($""Cannot create control for report {{report}}"")
        }};
    }}
}}
";

        public static string SwitchLine(string reportType, string controlType, bool needsGame)
        {
            var g = needsGame ? "game, " : "";

            return $@"
            {reportType} r => new {controlType}({g}r),";
        }
    }
}
