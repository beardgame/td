using System;
using System.Collections.Generic;
using System.Text;
using Microsoft.CodeAnalysis;

namespace Bearded.TD.Generators.Proxies
{
    sealed class ProxySourceGenerator
    {
        public static string GenerateFor(string className, INamedTypeSymbol interfaceSymbol)
        {
            var fieldName = NameFactory.FromInterfaceName(interfaceSymbol.Name).FieldName();

            return new ProxySourceGenerator()
                .addFileTop($"{interfaceSymbol.ContainingNamespace}", className, interfaceSymbol.Name)
                .addProperties(interfaceSymbol.GetMembers().OfType<IPropertySymbol>(), fieldName)
                .addField(interfaceSymbol.Name, fieldName)
                .addConstructor(className, interfaceSymbol.Name, fieldName)
                .addFileBottom()
                .build();
        }

        private readonly StringBuilder sb = new();

        private ProxySourceGenerator addFileTop(string @namespace, string className, string interfaceName)
        {
            sb.Append(Templates.FileHeader);
            sb.Append(Templates.ClassTop(@namespace, className, interfaceName));
            return this;
        }

        private ProxySourceGenerator addProperties(IEnumerable<IPropertySymbol> properties, string fieldName)
        {
            foreach (var propertySymbol in properties)
            {
                sb.Append(Templates.Property($"{propertySymbol.Type}", propertySymbol.Name, fieldName));
            }
            sb.Append(Environment.NewLine);

            return this;
        }

        private ProxySourceGenerator addField(string interfaceName, string fieldName)
        {
            sb.Append(Templates.ReadonlyField(interfaceName, fieldName));
            return this;
        }

        private ProxySourceGenerator addConstructor(string className, string interfaceName, string originalFieldName)
        {
            sb.Append(Templates.Constructor(className, interfaceName, originalFieldName));
            return this;
        }

        private ProxySourceGenerator addFileBottom()
        {
            sb.Append(Templates.ClassBottom);
            return this;
        }

        private string build() => sb.ToString();

        private static class Templates
        {
            public const string FileHeader = @"// This file is generated by Bearded.TD.Generators
";

            public static string ClassTop(string @namespace, string className, string interfaceName) => $@"
namespace {@namespace}
{{
    sealed class {className} : {interfaceName}
    {{";

            public const string ClassBottom = @"
    }
}
";

            public static string Property(string type, string name, string originalFieldName) => $@"
        public {type} {name} => {originalFieldName}.{name};";

            public static string ReadonlyField(string interfaceName, string fieldName) => $@"
        private readonly {interfaceName} {fieldName};
";

            public static string Constructor(string className, string interfaceName, string originalFieldName) => $@"
        public {className}({interfaceName} {originalFieldName})
        {{
            this.{originalFieldName} = {originalFieldName};
        }}
";
        }
    }
}
