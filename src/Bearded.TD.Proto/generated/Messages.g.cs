// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bearded.TD.Proto {

  /// <summary>Holder for reflection information generated from messages.proto</summary>
  public static partial class MessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for messages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5tZXNzYWdlcy5wcm90bxIKYmVhcmRlZC50ZBoLZXJyb3IucHJvdG8aCmdh",
            "bWUucHJvdG8aC2xvYmJ5LnByb3RvIlgKC0hhaWxSZXF1ZXN0EicKCWdhbWVf",
            "aW5mbxgBIAEoCzIULmJlYXJkZWQudGQuR2FtZUluZm8SIAoFbG9iYnkYAiAB",
            "KAsyES5iZWFyZGVkLnRkLkxvYmJ5IkUKDEhhaWxSZXNwb25zZRITCgthc3Np",
            "Z25lZF9pZBgBIAEoBRIgCgVlcnJvchgCIAMoCzIRLmJlYXJkZWQudGQuRXJy",
            "b3IiSAoLUGVlclJlcXVlc3QSJwoJZ2FtZV9pbmZvGAEgASgLMhQuYmVhcmRl",
            "ZC50ZC5HYW1lSW5mbxIQCghsb2JieV9pZBgCIAEoBSJSCgxQZWVyUmVzcG9u",
            "c2USIAoFbG9iYnkYASADKAsyES5iZWFyZGVkLnRkLkxvYmJ5EiAKBWVycm9y",
            "GAIgAygLMhEuYmVhcmRlZC50ZC5FcnJvciJCCgxMb2JieVJlcXVlc3QSEAoI",
            "bG9iYnlfaWQYASABKAUSIAoFbG9iYnkYAiABKAsyES5iZWFyZGVkLnRkLkxv",
            "YmJ5IjEKDUxvYmJ5UmVzcG9uc2USIAoFZXJyb3IYASADKAsyES5iZWFyZGVk",
            "LnRkLkVycm9yQhOqAhBCZWFyZGVkLlRELlByb3RvYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Bearded.TD.Proto.ErrorReflection.Descriptor, global::Bearded.TD.Proto.GameReflection.Descriptor, global::Bearded.TD.Proto.LobbyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bearded.TD.Proto.HailRequest), global::Bearded.TD.Proto.HailRequest.Parser, new[]{ "GameInfo", "Lobby" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bearded.TD.Proto.HailResponse), global::Bearded.TD.Proto.HailResponse.Parser, new[]{ "AssignedId", "Error" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bearded.TD.Proto.PeerRequest), global::Bearded.TD.Proto.PeerRequest.Parser, new[]{ "GameInfo", "LobbyId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bearded.TD.Proto.PeerResponse), global::Bearded.TD.Proto.PeerResponse.Parser, new[]{ "Lobby", "Error" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bearded.TD.Proto.LobbyRequest), global::Bearded.TD.Proto.LobbyRequest.Parser, new[]{ "LobbyId", "Lobby" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bearded.TD.Proto.LobbyResponse), global::Bearded.TD.Proto.LobbyResponse.Parser, new[]{ "Error" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class HailRequest : pb::IMessage<HailRequest> {
    private static readonly pb::MessageParser<HailRequest> _parser = new pb::MessageParser<HailRequest>(() => new HailRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HailRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bearded.TD.Proto.MessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HailRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HailRequest(HailRequest other) : this() {
      GameInfo = other.gameInfo_ != null ? other.GameInfo.Clone() : null;
      Lobby = other.lobby_ != null ? other.Lobby.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HailRequest Clone() {
      return new HailRequest(this);
    }

    /// <summary>Field number for the "game_info" field.</summary>
    public const int GameInfoFieldNumber = 1;
    private global::Bearded.TD.Proto.GameInfo gameInfo_;
    /// <summary>
    /// Game info of the requester.
    /// Should always be set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bearded.TD.Proto.GameInfo GameInfo {
      get { return gameInfo_; }
      set {
        gameInfo_ = value;
      }
    }

    /// <summary>Field number for the "lobby" field.</summary>
    public const int LobbyFieldNumber = 2;
    private global::Bearded.TD.Proto.Lobby lobby_;
    /// <summary>
    /// Info of the lobby to register.
    /// Should always be set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bearded.TD.Proto.Lobby Lobby {
      get { return lobby_; }
      set {
        lobby_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HailRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HailRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GameInfo, other.GameInfo)) return false;
      if (!object.Equals(Lobby, other.Lobby)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gameInfo_ != null) hash ^= GameInfo.GetHashCode();
      if (lobby_ != null) hash ^= Lobby.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (gameInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GameInfo);
      }
      if (lobby_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Lobby);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gameInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameInfo);
      }
      if (lobby_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lobby);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HailRequest other) {
      if (other == null) {
        return;
      }
      if (other.gameInfo_ != null) {
        if (gameInfo_ == null) {
          gameInfo_ = new global::Bearded.TD.Proto.GameInfo();
        }
        GameInfo.MergeFrom(other.GameInfo);
      }
      if (other.lobby_ != null) {
        if (lobby_ == null) {
          lobby_ = new global::Bearded.TD.Proto.Lobby();
        }
        Lobby.MergeFrom(other.Lobby);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (gameInfo_ == null) {
              gameInfo_ = new global::Bearded.TD.Proto.GameInfo();
            }
            input.ReadMessage(gameInfo_);
            break;
          }
          case 18: {
            if (lobby_ == null) {
              lobby_ = new global::Bearded.TD.Proto.Lobby();
            }
            input.ReadMessage(lobby_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HailResponse : pb::IMessage<HailResponse> {
    private static readonly pb::MessageParser<HailResponse> _parser = new pb::MessageParser<HailResponse>(() => new HailResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HailResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bearded.TD.Proto.MessagesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HailResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HailResponse(HailResponse other) : this() {
      assignedId_ = other.assignedId_;
      error_ = other.error_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HailResponse Clone() {
      return new HailResponse(this);
    }

    /// <summary>Field number for the "assigned_id" field.</summary>
    public const int AssignedIdFieldNumber = 1;
    private int assignedId_;
    /// <summary>
    /// Lobby ID assigned by the master server.
    /// Set if and only if the registration of the lobby was successful.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AssignedId {
      get { return assignedId_; }
      set {
        assignedId_ = value;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bearded.TD.Proto.Error> _repeated_error_codec
        = pb::FieldCodec.ForMessage(18, global::Bearded.TD.Proto.Error.Parser);
    private readonly pbc::RepeatedField<global::Bearded.TD.Proto.Error> error_ = new pbc::RepeatedField<global::Bearded.TD.Proto.Error>();
    /// <summary>
    /// Errors occured while registering the lobby.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bearded.TD.Proto.Error> Error {
      get { return error_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HailResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HailResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AssignedId != other.AssignedId) return false;
      if(!error_.Equals(other.error_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AssignedId != 0) hash ^= AssignedId.GetHashCode();
      hash ^= error_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AssignedId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AssignedId);
      }
      error_.WriteTo(output, _repeated_error_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AssignedId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AssignedId);
      }
      size += error_.CalculateSize(_repeated_error_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HailResponse other) {
      if (other == null) {
        return;
      }
      if (other.AssignedId != 0) {
        AssignedId = other.AssignedId;
      }
      error_.Add(other.error_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AssignedId = input.ReadInt32();
            break;
          }
          case 18: {
            error_.AddEntriesFrom(input, _repeated_error_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PeerRequest : pb::IMessage<PeerRequest> {
    private static readonly pb::MessageParser<PeerRequest> _parser = new pb::MessageParser<PeerRequest>(() => new PeerRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PeerRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bearded.TD.Proto.MessagesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeerRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeerRequest(PeerRequest other) : this() {
      GameInfo = other.gameInfo_ != null ? other.GameInfo.Clone() : null;
      lobbyId_ = other.lobbyId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeerRequest Clone() {
      return new PeerRequest(this);
    }

    /// <summary>Field number for the "game_info" field.</summary>
    public const int GameInfoFieldNumber = 1;
    private global::Bearded.TD.Proto.GameInfo gameInfo_;
    /// <summary>
    /// Game info of the peer.
    /// Should always be set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bearded.TD.Proto.GameInfo GameInfo {
      get { return gameInfo_; }
      set {
        gameInfo_ = value;
      }
    }

    /// <summary>Field number for the "lobby_id" field.</summary>
    public const int LobbyIdFieldNumber = 2;
    private int lobbyId_;
    /// <summary>
    /// If present, this is request is interpreted as a request to be introduced to a lobby.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LobbyId {
      get { return lobbyId_; }
      set {
        lobbyId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PeerRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PeerRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GameInfo, other.GameInfo)) return false;
      if (LobbyId != other.LobbyId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gameInfo_ != null) hash ^= GameInfo.GetHashCode();
      if (LobbyId != 0) hash ^= LobbyId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (gameInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GameInfo);
      }
      if (LobbyId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LobbyId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gameInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameInfo);
      }
      if (LobbyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LobbyId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PeerRequest other) {
      if (other == null) {
        return;
      }
      if (other.gameInfo_ != null) {
        if (gameInfo_ == null) {
          gameInfo_ = new global::Bearded.TD.Proto.GameInfo();
        }
        GameInfo.MergeFrom(other.GameInfo);
      }
      if (other.LobbyId != 0) {
        LobbyId = other.LobbyId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (gameInfo_ == null) {
              gameInfo_ = new global::Bearded.TD.Proto.GameInfo();
            }
            input.ReadMessage(gameInfo_);
            break;
          }
          case 16: {
            LobbyId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PeerResponse : pb::IMessage<PeerResponse> {
    private static readonly pb::MessageParser<PeerResponse> _parser = new pb::MessageParser<PeerResponse>(() => new PeerResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PeerResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bearded.TD.Proto.MessagesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeerResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeerResponse(PeerResponse other) : this() {
      lobby_ = other.lobby_.Clone();
      error_ = other.error_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeerResponse Clone() {
      return new PeerResponse(this);
    }

    /// <summary>Field number for the "lobby" field.</summary>
    public const int LobbyFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Bearded.TD.Proto.Lobby> _repeated_lobby_codec
        = pb::FieldCodec.ForMessage(10, global::Bearded.TD.Proto.Lobby.Parser);
    private readonly pbc::RepeatedField<global::Bearded.TD.Proto.Lobby> lobby_ = new pbc::RepeatedField<global::Bearded.TD.Proto.Lobby>();
    /// <summary>
    /// All currently available lobbies.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bearded.TD.Proto.Lobby> Lobby {
      get { return lobby_; }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bearded.TD.Proto.Error> _repeated_error_codec
        = pb::FieldCodec.ForMessage(18, global::Bearded.TD.Proto.Error.Parser);
    private readonly pbc::RepeatedField<global::Bearded.TD.Proto.Error> error_ = new pbc::RepeatedField<global::Bearded.TD.Proto.Error>();
    /// <summary>
    /// Errors occurred during request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bearded.TD.Proto.Error> Error {
      get { return error_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PeerResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PeerResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!lobby_.Equals(other.lobby_)) return false;
      if(!error_.Equals(other.error_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= lobby_.GetHashCode();
      hash ^= error_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      lobby_.WriteTo(output, _repeated_lobby_codec);
      error_.WriteTo(output, _repeated_error_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += lobby_.CalculateSize(_repeated_lobby_codec);
      size += error_.CalculateSize(_repeated_error_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PeerResponse other) {
      if (other == null) {
        return;
      }
      lobby_.Add(other.lobby_);
      error_.Add(other.error_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            lobby_.AddEntriesFrom(input, _repeated_lobby_codec);
            break;
          }
          case 18: {
            error_.AddEntriesFrom(input, _repeated_error_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LobbyRequest : pb::IMessage<LobbyRequest> {
    private static readonly pb::MessageParser<LobbyRequest> _parser = new pb::MessageParser<LobbyRequest>(() => new LobbyRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LobbyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bearded.TD.Proto.MessagesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LobbyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LobbyRequest(LobbyRequest other) : this() {
      lobbyId_ = other.lobbyId_;
      Lobby = other.lobby_ != null ? other.Lobby.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LobbyRequest Clone() {
      return new LobbyRequest(this);
    }

    /// <summary>Field number for the "lobby_id" field.</summary>
    public const int LobbyIdFieldNumber = 1;
    private int lobbyId_;
    /// <summary>
    /// ID of the lobby to be updated.
    /// Should always be set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LobbyId {
      get { return lobbyId_; }
      set {
        lobbyId_ = value;
      }
    }

    /// <summary>Field number for the "lobby" field.</summary>
    public const int LobbyFieldNumber = 2;
    private global::Bearded.TD.Proto.Lobby lobby_;
    /// <summary>
    /// Info of the lobby to update. If absent, lobby will be removed and connection dropped.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bearded.TD.Proto.Lobby Lobby {
      get { return lobby_; }
      set {
        lobby_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LobbyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LobbyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LobbyId != other.LobbyId) return false;
      if (!object.Equals(Lobby, other.Lobby)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LobbyId != 0) hash ^= LobbyId.GetHashCode();
      if (lobby_ != null) hash ^= Lobby.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LobbyId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LobbyId);
      }
      if (lobby_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Lobby);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LobbyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LobbyId);
      }
      if (lobby_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lobby);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LobbyRequest other) {
      if (other == null) {
        return;
      }
      if (other.LobbyId != 0) {
        LobbyId = other.LobbyId;
      }
      if (other.lobby_ != null) {
        if (lobby_ == null) {
          lobby_ = new global::Bearded.TD.Proto.Lobby();
        }
        Lobby.MergeFrom(other.Lobby);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LobbyId = input.ReadInt32();
            break;
          }
          case 18: {
            if (lobby_ == null) {
              lobby_ = new global::Bearded.TD.Proto.Lobby();
            }
            input.ReadMessage(lobby_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LobbyResponse : pb::IMessage<LobbyResponse> {
    private static readonly pb::MessageParser<LobbyResponse> _parser = new pb::MessageParser<LobbyResponse>(() => new LobbyResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LobbyResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bearded.TD.Proto.MessagesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LobbyResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LobbyResponse(LobbyResponse other) : this() {
      error_ = other.error_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LobbyResponse Clone() {
      return new LobbyResponse(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Bearded.TD.Proto.Error> _repeated_error_codec
        = pb::FieldCodec.ForMessage(10, global::Bearded.TD.Proto.Error.Parser);
    private readonly pbc::RepeatedField<global::Bearded.TD.Proto.Error> error_ = new pbc::RepeatedField<global::Bearded.TD.Proto.Error>();
    /// <summary>
    /// Errors occurred during request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bearded.TD.Proto.Error> Error {
      get { return error_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LobbyResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LobbyResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!error_.Equals(other.error_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= error_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      error_.WriteTo(output, _repeated_error_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += error_.CalculateSize(_repeated_error_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LobbyResponse other) {
      if (other == null) {
        return;
      }
      error_.Add(other.error_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            error_.AddEntriesFrom(input, _repeated_error_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
