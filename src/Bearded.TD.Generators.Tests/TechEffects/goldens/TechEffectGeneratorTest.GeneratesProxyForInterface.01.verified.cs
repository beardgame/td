//HintName: MyParametersTemplate.cs
// This file is generated by Bearded.TD.Generators

using System;
using Bearded.TD.Shared.TechEffects;
using Bearded.Utilities;
using Newtonsoft.Json;

namespace Bearded.TD.Generators.Tests.TechEffects
{
    [ParametersTemplate(typeof(IMyParameters))]
    sealed class MyParametersTemplate : TemplateBase, IMyParameters
    {
        public int RawType { get; }
        public int? NullableType { get; }
        public Unit WrappedType { get; }
        public double RawTypeWithDefault { get; }
        public bool BoolTypeWithDefault { get; }
        public int ModifiableRawType { get; }
        public Unit ModifiableWrappedType { get; }

        [JsonConstructor]
        public MyParametersTemplate(
            int rawType,
            int? nullableType,
            Unit wrappedType,
            double? rawTypeWithDefault,
            bool? boolTypeWithDefault,
            int? modifiableRawType,
            Unit? modifiableWrappedType)
        {
            RawType = rawType;
            NullableType = nullableType;
            WrappedType = wrappedType;
            RawTypeWithDefault = rawTypeWithDefault.GetValueOrDefault(0.5);
            BoolTypeWithDefault = boolTypeWithDefault.GetValueOrDefault(true);
            ModifiableRawType = modifiableRawType.GetValueOrDefault(10);
            ModifiableWrappedType = modifiableWrappedType.GetValueOrDefault(Bearded.TD.Generators.Tests.TechEffects.IMyParameters.UnitConverter.ToWrapped(5));
        }

        public bool HasAttributeOfType(AttributeType type) => MyParametersModifiable.AttributeIsKnown(type);

        public IMyParameters CreateModifiableInstance() => new MyParametersModifiable(this);

    }
}
